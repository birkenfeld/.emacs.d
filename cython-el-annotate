#!/usr/bin/python
import os
import re

from Cython import Utils
from Cython.Compiler.Main import main
from Cython.Compiler.Annotate import AnnotationCCodeWriter, line_pos_comment

def new_save_annotation(self, source_filename, target_filename):
    self.mark_pos(None)
    f = Utils.open_source_file(source_filename)
    lines = list(f)
    f.close()
    all = []
    for pos, item in self.annotations:
        if pos[0] == source_filename:
            start = item.start()
            size, end = item.end()
            if size:
                all.append((pos, start))
                all.append(((source_filename, pos[1], pos[2]+size), end))
            else:
                all.append((pos, start+end))

    all.sort()
    all.reverse()
    for pos, item in all:
        _, line_no, col = pos
        line_no -= 1
        col += 1
        line = lines[line_no]
        lines[line_no] = line[:col] + item + line[col:]

    el_filename = os.path.splitext(target_filename)[0] + ".el"
    f = open(el_filename, "w")

    f.write("""\
;; This is an elisp-readable form of Cython annotation data -- a list of
;; annotations for each source line, where an annotation is a cons of
;; (score . code).

'(
""")
    k = 0

    py_c_api = re.compile(u'(?:Py[A-Z][a-z]+_[A-Z][a-z][A-Za-z_]+)\(')
    py_marco_api = re.compile(u'(?:Py[A-Z][a-z]+_[A-Z][A-Z_]+)\(')
    pyx_c_api = re.compile(u'(?:__Pyx_[A-Z][a-z_][A-Za-z_]+)\(')
    pyx_macro_api = re.compile(u'(?:__Pyx_[A-Z][A-Z_]+)\(')
    #error_goto = re.compile(
    #    ur'(?:(?:; *if .*)? \{__pyx_filename = .*goto __pyx_L\w+;\})')
    refnanny = re.compile(
        u'(?:__Pyx_X?(?:GOT|GIVE)REF|__Pyx_RefNanny[A-Za-z]+)')

    for line in lines:
        k += 1
        try:
            code = self.code[k]
        except KeyError:
            code = ''

        py_c_api_calls = len(py_c_api.findall(code))
        pyx_c_api_calls = len(pyx_c_api.findall(code))
        py_macro_api_calls = len(py_marco_api.findall(code))
        pyx_macro_api_calls = len(pyx_macro_api.findall(code))
        refnanny_calls = len(refnanny.findall(code))

        score = 5*py_c_api_calls + 2*pyx_c_api_calls + py_macro_api_calls \
                + pyx_macro_api_calls - refnanny_calls

        # inline annotations are redundant
        code = re.sub(line_pos_comment, '', code)
        code = code.strip('\n')
        f.write('  ;; line %d: %s\n' % (k, line.strip()))
        f.write('  (%d . %s)\n' %
                (score, '"' + repr(code).replace('"', '\\"')[2:-1] + '"'))
    f.write(')\n')
    f.close()

# monkey-patch
AnnotationCCodeWriter.save_annotation = new_save_annotation

main(command_line=1)
